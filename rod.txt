// apps/web/src/app/layout.tsx
import React from "react";
import "../styles/globals.css";

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className="bg-gradient-to-b from-gray-900 to-black text-white min-h-screen">
        <div className="container mx-auto px-4 py-8 relative max-w-md">
          {children}
        </div>
      </body>
    </html>
  );
}

// apps/web/src/app/page.tsx
"use client";

import { useState } from "react";
import Header from "./components/header";
import Balance from "./components/balance";
import Actions from "./components/actions";
import QuickSend from "./components/quick-send";
import TransactionHistory from "./components/transaction-history";
import NotificationModal from "./components/notification-modal";
import SearchModal from "./components/search-modal";
import TransactionModal from "./components/transaction-modal";

interface Transaction {
  id: number;
  amount: number;
  date: Date;
  description: string;
  status: "completed" | "pending" | "failed";
  recipient?: string;
  sender?: string;
  fee?: number;
}
interface Contact {
  handle: string;
  avatarUrl: string;
}

interface Notification {
  id: number;
  message: string;
  date: Date;
  read: boolean;
}

export default function Home() {
  const [balance, setBalance] = useState<number>(10860);
  const [transactions, setTransactions] = useState<Transaction[]>([
    {
      id: 1,
      amount: -100,
      date: new Date(Date.now() - 120000),
      description: "Coffee",
      status: "completed",
      recipient: "@starbucks",
      fee: 0,
    },
    {
      id: 2,
      amount: 100,
      date: new Date(Date.now() - 180000),
      description: "Refund",
      status: "completed",
      sender: "@amazon",
      fee: 0,
    },
    {
      id: 3,
      amount: 100,
      date: new Date(Date.now() - 240000),
      description: "Gift from @vegeta",
      status: "completed",
      sender: "@vegeta",
      fee: 0,
    },
    {
      id: 4,
      amount: -55,
      date: new Date(Date.now() - 172800000),
      description: "Movie tickets",
      status: "completed",
      recipient: "@cineplex",
      fee: 0,
    },
    {
      id: 5,
      amount: 42,
      date: new Date(Date.now() - 1814400000),
      description: "Cashback",
      status: "completed",
      sender: "@creditcard",
      fee: 0,
    },
    {
      id: 6,
      amount: -23,
      date: new Date(Date.now() - 1814600000),
      description: "Snacks",
      status: "completed",
      recipient: "@7eleven",
      fee: 0,
    },
  ]);

  const [selectedTransaction, setSelectedTransaction] =
    useState<Transaction | null>(null);

  const contacts: Contact[] = [
    { handle: "@gohan", avatarUrl: "/avatar/gohan.jpg" },
    { handle: "@vegeta", avatarUrl: "/avatar/vegeta.jpeg" },
    { handle: "@frieza", avatarUrl: "/avatar/frieza.png" },
    { handle: "@piccolo", avatarUrl: "/avatar/piccolo.jpg" },
    { handle: "@cell", avatarUrl: "/avatar/cell.jpg" },
  ];

  const [notifications, setNotifications] = useState<Notification[]>([
    {
      id: 1,
      message: "You received 100 sats from @vegeta",
      date: new Date(Date.now() - 3600000),
      read: false,
    },
    {
      id: 2,
      message: "Your transaction of 55 sats to @gohan is completed",
      date: new Date(Date.now() - 7200000),
      read: false,
    },
    {
      id: 3,
      message: "Welcome to Rod wallet application!",
      date: new Date(Date.now() - 86400000),
      read: true,
    },
  ]);

  const [isNotificationModalOpen, setIsNotificationModalOpen] = useState(false);
  const [isSearchModalOpen, setIsSearchModalOpen] = useState(false);

  const handleTransactionClick = (transaction: Transaction) => {
    setSelectedTransaction(transaction);
  };

  const handleCloseTransactionModal = () => {
    setSelectedTransaction(null);
  };

  const handleTransaction = (amount: number) => {
    setBalance((prevBalance) => prevBalance + amount);
    setTransactions((prevTransactions) => [
      {
        id: prevTransactions.length + 1,
        amount,
        date: new Date(),
        description: amount > 0 ? "Received" : "Sent",
        status: "completed",
      },
      ...prevTransactions,
    ]);
  };

  const handleSend = () => {
    handleTransaction(-100);
  };
  const handleReceive = () => {
    handleTransaction(100);
  };
  const handleScan = () => {
    console.log("Scanning QR code");
  };
  const handleGift = () => {
    console.log("Gift functionality");
  };

  const handleQuickSend = (handle: string) => {
    console.log(`Quick send to ${handle}`);
    // Implement quick send functionality here
  };

  const handleSettingsClick = () => {
    console.log("Settings button clicked");
    // Implement settings page navigation here
  };

  const handleSearchClick = () => {
    console.log("Search button clicked");
    setIsSearchModalOpen(true);
  };

  const handleNotificationClick = () => {
    setIsNotificationModalOpen(true);
  };

  const handleMarkNotificationsAsRead = () => {
    setNotifications((prevNotifications) =>
      prevNotifications.map((notification) => ({
        ...notification,
        read: true,
      })),
    );
  };

  const unreadNotificationsCount = notifications.filter((n) => !n.read).length;

  return (
    <div className="max-w-md mx-auto p-6 min-h-screen">
      <Header
        avatarUrl="/avatar/goku.jpeg"
        onNotificationClick={handleNotificationClick}
        onSearchClick={handleSearchClick}
        onSettingsClick={handleSettingsClick}
        unreadNotificationsCount={unreadNotificationsCount}
        userHandle="@goku"
      />
      <NotificationModal
        isOpen={isNotificationModalOpen}
        notifications={notifications}
        onClose={() => {
          setIsNotificationModalOpen(false);
        }}
        onMarkAsRead={handleMarkNotificationsAsRead}
      />
      <SearchModal
        contacts={contacts}
        isOpen={isSearchModalOpen}
        onClose={() => {
          setIsSearchModalOpen(false);
        }}
      />
      <Balance balance={balance} />
      <Actions
        onGift={handleGift}
        onReceive={handleReceive}
        onScan={handleScan}
        onSend={handleSend}
      />
      <QuickSend contacts={contacts} onSend={handleQuickSend} />
      <TransactionHistory
        onTransactionClick={handleTransactionClick}
        transactions={transactions}
      />
      {selectedTransaction ? (
        <TransactionModal
          onClose={handleCloseTransactionModal}
          transaction={selectedTransaction}
        />
      ) : null}{" "}
    </div>
  );
}

// apps/web/src/app/components/settings.tsx
import React from "react";
import { Cog6ToothIcon } from "@heroicons/react/24/solid";

const SettingsButton: React.FC = () => {
  const handleOpenSettings = () => {
    const event = new CustomEvent("openSettings");
    window.dispatchEvent(event);
  };

  return (
    <button
      className="absolute top-6 right-6 text-gray-400 hover:text-white transition duration-200"
      onClick={handleOpenSettings}
    >
      <Cog6ToothIcon className="h-8 w-8" />
    </button>
  );
};

export default SettingsButton;

// apps/web/src/app/components/actions.tsx
import React from "react";
import {
  ArrowUpIcon,
  ArrowDownIcon,
  QrCodeIcon,
  GiftIcon,
} from "@heroicons/react/24/solid";

interface ActionsProps {
  onSend: () => void;
  onReceive: () => void;
  onScan: () => void;
  onGift: () => void;
}

const Actions: React.FC<ActionsProps> = ({
  onSend,
  onReceive,
  onScan,
  onGift,
}) => {
  const ActionButton: React.FC<{
    icon: React.ReactNode;
    label: string;
    onClick: () => void;
  }> = ({ icon, label, onClick }) => (
    <button className="flex flex-col items-center" onClick={onClick}>
      <div className="action-button mb-2">{icon}</div>
      <span className="text-xs text-text-secondary">{label}</span>
    </button>
  );

  return (
    <div className="flex justify-between mb-8">
      <ActionButton icon={<ArrowUpIcon />} label="Send" onClick={onSend} />
      <ActionButton
        icon={<ArrowDownIcon />}
        label="Receive"
        onClick={onReceive}
      />
      <ActionButton icon={<QrCodeIcon />} label="Scan" onClick={onScan} />
      <ActionButton icon={<GiftIcon />} label="Gift" onClick={onGift} />
    </div>
  );
};

export default Actions;

// apps/web/src/app/components/transaction-modal.tsx
import React from "react";
import { Dialog } from "@headlessui/react";
import { format } from "date-fns";

interface Transaction {
  id: number;
  amount: number;
  date: Date;
  description: string;
  status: "completed" | "pending" | "failed";
  recipient?: string;
  sender?: string;
  fee?: number;
}

interface TransactionModalProps {
  transaction: Transaction;
  onClose: () => void;
}

const TransactionModal: React.FC<TransactionModalProps> = ({
  transaction,
  onClose,
}) => {
  return (
    <Dialog className="relative z-50" onClose={onClose} open>
      <div aria-hidden="true" className="fixed inset-0 bg-black/30" />
      <div className="fixed inset-0 flex items-center justify-center p-4">
        <Dialog.Panel className="w-full max-w-md rounded-2xl bg-card-background p-6 shadow-xl">
          <Dialog.Title className="text-lg font-medium mb-4">
            Transaction Details
          </Dialog.Title>
          <div className="space-y-4">
            <div>
              <h3 className="text-sm font-medium text-text-secondary">
                Amount
              </h3>
              <p
                className={`text-xl font-bold ${transaction.amount > 0 ? "text-green-400" : "text-red-400"}`}
              >
                {transaction.amount > 0 ? "+" : "-"}{" "}
                {Math.abs(transaction.amount)} sats
              </p>
            </div>
            <div>
              <h3 className="text-sm font-medium text-text-secondary">
                Description
              </h3>
              <p>{transaction.description}</p>
            </div>
            <div>
              <h3 className="text-sm font-medium text-text-secondary">Date</h3>
              <p>{format(transaction.date, "PPpp")}</p>
            </div>
            <div>
              <h3 className="text-sm font-medium text-text-secondary">
                Status
              </h3>
              <p className="capitalize">{transaction.status}</p>
            </div>
            {transaction.recipient ? (
              <div>
                <h3 className="text-sm font-medium text-text-secondary">
                  Recipient
                </h3>
                <p>{transaction.recipient}</p>
              </div>
            ) : null}
            {transaction.sender ? (
              <div>
                <h3 className="text-sm font-medium text-text-secondary">
                  Sender
                </h3>
                <p>{transaction.sender}</p>
              </div>
            ) : null}
            {transaction.fee !== undefined && (
              <div>
                <h3 className="text-sm font-medium text-text-secondary">
                  Transaction Fee
                </h3>
                <p>{transaction.fee} sats</p>
              </div>
            )}
          </div>
          <button
            className="mt-6 w-full bg-accent text-white rounded-lg py-2 hover:bg-opacity-90 transition-colors duration-150"
            onClick={onClose}
          >
            Close
          </button>
        </Dialog.Panel>
      </div>
    </Dialog>
  );
};

export default TransactionModal;

// apps/web/src/app/components/search-modal.tsx
import React, { useState } from "react";
import { Dialog } from "@headlessui/react";
import { MagnifyingGlassIcon } from "@heroicons/react/24/outline";

interface Contact {
  handle: string;
  avatarUrl: string;
}

interface SearchModalProps {
  isOpen: boolean;
  onClose: () => void;
  contacts: Contact[];
}

const SearchModal: React.FC<SearchModalProps> = ({
  isOpen,
  onClose,
  contacts,
}) => {
  const [searchTerm, setSearchTerm] = useState("");

  const filteredContacts = contacts.filter((contact) =>
    contact.handle.toLowerCase().includes(searchTerm.toLowerCase()),
  );

  return (
    <Dialog className="relative z-50" onClose={onClose} open={isOpen}>
      <div aria-hidden="true" className="fixed inset-0 bg-black/30" />
      <div className="fixed inset-0 flex items-center justify-center p-4">
        <Dialog.Panel className="w-full max-w-md rounded-2xl bg-card-background p-6 shadow-xl">
          <Dialog.Title className="text-lg font-medium mb-4">
            Search Contacts
          </Dialog.Title>
          <div className="relative mb-4">
            <input
              className="w-full bg-gray-800 text-white rounded-lg pl-10 pr-4 py-2 focus:outline-none focus:ring-2 focus:ring-accent"
              onChange={(e) => {
                setSearchTerm(e.target.value);
              }}
              placeholder="Search by handle..."
              type="text"
              value={searchTerm}
            />
            <MagnifyingGlassIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
          </div>
          <div className="space-y-2 max-h-60 overflow-y-auto">
            {filteredContacts.map((contact) => (
              <div
                className="flex items-center p-2 hover:bg-gray-700 rounded-lg transition-colors duration-150"
                key={contact.handle}
              >
                <img
                  alt={contact.handle}
                  className="w-10 h-10 rounded-full mr-3"
                  src={contact.avatarUrl}
                />
                <span>{contact.handle}</span>
              </div>
            ))}
          </div>
          <button
            className="mt-4 w-full bg-accent text-white rounded-lg py-2 hover:bg-opacity-90 transition-colors duration-150"
            onClick={onClose}
          >
            Close
          </button>
        </Dialog.Panel>
      </div>
    </Dialog>
  );
};

export default SearchModal;

// apps/web/src/app/components/transaction-history.tsx
import React, { useState, useEffect } from "react";
import { formatDistanceToNow } from "date-fns";
import { ChevronLeftIcon, ChevronRightIcon } from "@heroicons/react/24/solid";

interface Transaction {
  id: number;
  amount: number;
  date: Date;
  description: string;
  status: "completed" | "pending" | "failed";
}

interface TransactionHistoryProps {
  transactions: Transaction[];
  onTransactionClick: (transaction: Transaction) => void;
}

const TRANSACTIONS_PER_PAGE = 5;

const TransactionHistory: React.FC<TransactionHistoryProps> = ({
  transactions,
  onTransactionClick,
}) => {
  const [currentPage, setCurrentPage] = useState(1);
  const [animate, setAnimate] = useState(false);

  const formatAmount = (amount: number) => {
    return `${amount > 0 ? "+" : ""}${amount} sats`;
  };

  const formatDate = (date: Date) => {
    return formatDistanceToNow(date, { addSuffix: true });
  };

  const totalPages = Math.ceil(transactions.length / TRANSACTIONS_PER_PAGE);
  const startIndex = (currentPage - 1) * TRANSACTIONS_PER_PAGE;
  const visibleTransactions = transactions.slice(
    startIndex,
    startIndex + TRANSACTIONS_PER_PAGE,
  );

  const goToPreviousPage = () => {
    setCurrentPage((prev) => Math.max(prev - 1, 1));
  };
  const goToNextPage = () => {
    setCurrentPage((prev) => Math.min(prev + 1, totalPages));
  };

  useEffect(() => {
    setAnimate(true);
    const timer = setTimeout(() => {
      setAnimate(false);
    }, 300);
    return () => {
      clearTimeout(timer);
    };
  }, [currentPage]);

  return (
    <div>
      <h3 className="section-title mb-4">Recent Transactions</h3>
      <div className="card">
        {visibleTransactions.map((tx) => (
          <div
            className="transaction-item px-4 py-3 hover:bg-gray-700 cursor-pointer transition-colors duration-150"
            key={tx.id}
            onClick={() => {
              onTransactionClick(tx);
            }}
          >
            <div className="flex justify-between items-center">
              <span
                className={`font-semibold ${
                  tx.amount > 0 ? "text-green-400" : "text-red-400"
                }`}
              >
                {formatAmount(tx.amount)}
              </span>
            </div>
            <div className="flex justify-between items-center mt-1">
              <span className="text-sm text-text-secondary">
                {formatDate(tx.date)}
              </span>
            </div>
          </div>
        ))}
      </div>
      {totalPages > 1 && (
        <div className="flex justify-between items-center mt-4">
          <button
            className="pagination-button"
            disabled={currentPage === 1}
            onClick={goToPreviousPage}
          >
            <ChevronLeftIcon className="w-5 h-5 text-text-secondary" />
          </button>
          <span className="pagination-text">
            Page {currentPage} of {totalPages}
          </span>
          <button
            className="pagination-button"
            disabled={currentPage === totalPages}
            onClick={goToNextPage}
          >
            <ChevronRightIcon className="w-5 h-5 text-text-secondary" />
          </button>
        </div>
      )}
    </div>
  );
};

export default TransactionHistory;

// apps/web/src/app/components/quick-send.tsx
import React, { useRef } from "react";
import Image from "next/image";

interface Contact {
  handle: string;
  avatarUrl: string;
}

interface QuickSendProps {
  contacts: Contact[];
  onSend: (handle: string) => void;
}

const QuickSend: React.FC<QuickSendProps> = ({ contacts, onSend }) => {
  const scrollContainerRef = useRef<HTMLDivElement>(null);

  const scroll = (direction: "left" | "right") => {
    if (scrollContainerRef.current) {
      const scrollAmount = direction === "left" ? -100 : 100;
      scrollContainerRef.current.scrollBy({
        left: scrollAmount,
        behavior: "smooth",
      });
    }
  };

  return (
    <div className="mb-6">
      <h3 className="section-title mb-4">Contacts</h3>
      <div className="relative">
        <div
          className="flex space-x-4 overflow-x-auto scrollbar-hide"
          ref={scrollContainerRef}
          style={{ scrollSnapType: "x mandatory" }}
        >
          {contacts.map((contact) => (
            <div
              className="flex flex-col items-center flex-shrink-0"
              key={contact.handle}
              style={{ scrollSnapAlign: "start" }}
            >
              <button
                className="w-16 h-16 rounded-full overflow-hidden focus:outline-none focus:ring-2 focus:ring-accent transition-shadow duration-200"
                onClick={() => {
                  onSend(contact.handle);
                }}
              >
                <Image
                  alt={`Avatar of ${contact.handle}`}
                  height={64}
                  src={contact.avatarUrl}
                  width={64}
                />
              </button>
              <span className="text-xs text-text-secondary mt-2">
                {contact.handle}
              </span>
            </div>
          ))}
        </div>
        {contacts.length > 3 && (
          <>
            <button
              className="absolute left-0 top-1/2 transform -translate-y-1/2 bg-card-background rounded-full p-1 focus:outline-none focus:ring-2 focus:ring-accent"
              onClick={() => {
                scroll("left");
              }}
            >
              <svg
                className="h-6 w-6 text-text-secondary"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M15 19l-7-7 7-7"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                />
              </svg>
            </button>
            <button
              className="absolute right-0 top-1/2 transform -translate-y-1/2 bg-card-background rounded-full p-1 focus:outline-none focus:ring-2 focus:ring-accent"
              onClick={() => {
                scroll("right");
              }}
            >
              <svg
                className="h-6 w-6 text-text-secondary"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M9 5l7 7-7 7"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                />
              </svg>
            </button>
          </>
        )}
      </div>
    </div>
  );
};

export default QuickSend;

// apps/web/src/app/components/settings-button.tsx
"use client";

import React from "react";
import { Cog6ToothIcon } from "@heroicons/react/24/solid";

const SettingsButton: React.FC = () => {
  const handleOpenSettings = () => {
    const event = new CustomEvent("openSettings");
    window.dispatchEvent(event);
  };

  return (
    <button
      className="absolute top-6 right-6 text-gray-400 hover:text-white transition duration-200 bg-gray-800 p-2 rounded-full hover:bg-gray-700"
      onClick={handleOpenSettings}
    >
      <Cog6ToothIcon className="h-6 w-6" />
    </button>
  );
};

export default SettingsButton;

// apps/web/src/app/components/notification-modal.tsx
import React from "react";
import { Dialog } from "@headlessui/react";
import { formatDistanceToNow } from "date-fns";

interface Notification {
  id: number;
  message: string;
  date: Date;
  read: boolean;
}

interface NotificationModalProps {
  isOpen: boolean;
  onClose: () => void;
  notifications: Notification[];
  onMarkAsRead: () => void;
}

const NotificationModal: React.FC<NotificationModalProps> = ({
  isOpen,
  onClose,
  notifications,
  onMarkAsRead,
}) => {
  return (
    <Dialog className="relative z-50" onClose={onClose} open={isOpen}>
      <div aria-hidden="true" className="fixed inset-0 bg-black/30" />
      <div className="fixed inset-0 flex items-center justify-center p-4">
        <Dialog.Panel className="w-full max-w-md rounded-2xl bg-card-background p-6 shadow-xl">
          <Dialog.Title className="text-lg font-medium mb-4">
            Notifications
          </Dialog.Title>
          <div className="space-y-4 max-h-60 overflow-y-auto">
            {notifications.map((notification) => (
              <div
                className={`p-3 rounded-lg ${
                  notification.read ? "bg-gray-800" : "bg-gray-700"
                }`}
                key={notification.id}
              >
                <p className="text-sm">{notification.message}</p>
                <p className="text-xs text-gray-400 mt-1">
                  {formatDistanceToNow(notification.date, { addSuffix: true })}
                </p>
              </div>
            ))}
          </div>
          <div className="mt-4 flex justify-between">
            <button
              className="bg-accent text-white rounded-lg px-4 py-2 hover:bg-opacity-90 transition-colors duration-150"
              onClick={onMarkAsRead}
            >
              Mark all as read
            </button>
            <button
              className="bg-gray-700 text-white rounded-lg px-4 py-2 hover:bg-opacity-90 transition-colors duration-150"
              onClick={onClose}
            >
              Close
            </button>
          </div>
        </Dialog.Panel>
      </div>
    </Dialog>
  );
};

export default NotificationModal;

// apps/web/src/app/components/balance.tsx
import React, { useState } from "react";
import { EyeIcon, ChevronDownIcon } from "@heroicons/react/24/outline";
import type { CurrencyUnit } from "../../utils/currency-utils";
import { formatBalance } from "../../utils/currency-utils";

interface BalanceProps {
  balance: number;
}

const Balance: React.FC<BalanceProps> = ({ balance }) => {
  const [unit, setUnit] = useState<CurrencyUnit>("sats");
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);

  const toggleDropdown = () => {
    setIsDropdownOpen(!isDropdownOpen);
  };

  const changeUnit = (newUnit: CurrencyUnit) => {
    setUnit(newUnit);
    setIsDropdownOpen(false);
  };

  return (
    <div className="card p-4 mb-6 relative">
      <div className="flex justify-between items-center mb-2">
        <span className="text-sm font-medium text-text-secondary">
          YOUR BALANCE
        </span>
        <EyeIcon className="w-5 h-5 text-text-secondary" />
      </div>
      <div
        className="flex items-center cursor-pointer"
        onClick={toggleDropdown}
      >
        <h2 className="balance-text mr-2">{formatBalance(balance, unit)}</h2>
        <ChevronDownIcon className="w-5 h-5 text-text-secondary" />
      </div>
      {isDropdownOpen ? (
        <div className="absolute top-full left-0 mt-2 w-full bg-card-background rounded-md shadow-lg z-10 py-1">
          <button
            className="block w-full text-left px-4 py-2 text-sm text-text-primary hover:bg-gray-700"
            onClick={() => {
              changeUnit("sats");
            }}
          >
            Satoshis (sats)
          </button>
          <button
            className="block w-full text-left px-4 py-2 text-sm text-text-primary hover:bg-gray-700"
            onClick={() => {
              changeUnit("btc");
            }}
          >
            Bitcoin (BTC)
          </button>
          <button
            className="block w-full text-left px-4 py-2 text-sm text-text-primary hover:bg-gray-700"
            onClick={() => {
              changeUnit("usd");
            }}
          >
            US Dollar (USD)
          </button>
        </div>
      ) : null}
    </div>
  );
};

export default Balance;

// apps/web/src/app/components/header.tsx
import React from "react";
import {
  BellIcon,
  Cog6ToothIcon,
  MagnifyingGlassIcon,
} from "@heroicons/react/24/outline";

interface HeaderProps {
  userHandle: string;
  avatarUrl: string;
  onNotificationClick: () => void;
  onSettingsClick: () => void;
  onSearchClick: () => void;
  unreadNotificationsCount: number;
}

const Header: React.FC<HeaderProps> = ({
  userHandle,
  avatarUrl,
  onNotificationClick,
  onSettingsClick,
  onSearchClick,
  unreadNotificationsCount,
}) => {
  return (
    <div className="flex justify-between items-center mb-6">
      <div className="flex items-center">
        <img
          alt="User avatar"
          className="w-10 h-10 rounded-full mr-3"
          src={avatarUrl}
        />
        <div>
          <h1 className="text-xl font-semibold text-text-primary">
            Gm {userHandle}!
          </h1>
          <p className="text-sm text-text-secondary">Let's go nuts!</p>
        </div>
      </div>
      <div className="flex space-x-2">
        <button
          className="p-2 bg-card-background rounded-full transition-colors duration-200 hover:bg-opacity-80 focus:outline-none focus:ring-2 focus:ring-accent"
          onClick={onSearchClick}
        >
          <MagnifyingGlassIcon className="w-6 h-6 text-text-secondary" />
        </button>
        <button
          className="p-2 bg-card-background rounded-full transition-colors duration-200 hover:bg-opacity-80 focus:outline-none focus:ring-2 focus:ring-accent relative"
          onClick={onNotificationClick}
        >
          <BellIcon className="w-6 h-6 text-text-secondary" />
          {unreadNotificationsCount > 0 && (
            <span className="absolute top-0 right-0 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
              {unreadNotificationsCount}
            </span>
          )}
        </button>
        <button
          className="p-2 bg-card-background rounded-full transition-colors duration-200 hover:bg-opacity-80 focus:outline-none focus:ring-2 focus:ring-accent"
          onClick={onSettingsClick}
        >
          <Cog6ToothIcon className="w-6 h-6 text-text-secondary" />
        </button>
      </div>
    </div>
  );
};

export default Header;

// apps/web/src/utils/currency-utils.ts
// utils/currencyUtils.ts

const SATS_PER_BTC = 100000000;
const BTC_TO_USD = 58000; // Hardcoded for now

export type CurrencyUnit = "sats" | "btc" | "usd";

export function getActualBtcPrice(): number {
  // TODO: Implement API call to get actual BTC price
  return BTC_TO_USD;
}

export function convertSatsToBtc(sats: number): number {
  return sats / SATS_PER_BTC;
}

export function convertSatsToUsd(sats: number): number {
  const btc = convertSatsToBtc(sats);
  return btc * getActualBtcPrice();
}

export function formatBalance(balance: number, unit: CurrencyUnit): string {
  switch (unit) {
    case "sats":
      return `${balance.toLocaleString()} sats`;
    case "btc":
      return `₿ ${convertSatsToBtc(balance).toFixed(8)}`;
    case "usd":
      return `$ ${convertSatsToUsd(balance).toFixed(2)}`;
  }
}

// apps/web/src/styles/globals.css
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background-color: #141414;
  --card-background: #1e1e1e;
  --text-primary: #e0e0e0;
  --text-secondary: #a0a0a0;
  --accent-color: #8b5cf6;
}

body {
  font-family: 'Inter', sans-serif;
  background-color: var(--background-color);
  color: var(--text-primary);
}

@layer components {
  .card {
    @apply bg-card-background rounded-xl shadow-md transition-all duration-300 ease-in-out;
  }

  .action-button {
    @apply flex items-center justify-center rounded-full w-14 h-14 bg-card-background shadow-md transition-all duration-200 hover:bg-opacity-80;
  }

  .action-button svg {
    @apply w-6 h-6 text-accent transition-colors duration-200;
  }

  .transaction-item {
    @apply flex justify-between items-center py-3 border-b border-gray-800 last:border-b-0 transition-opacity duration-200;
  }

  .balance-text {
    @apply text-3xl font-bold text-text-primary transition-all duration-300;
  }

  .section-title {
    @apply text-lg font-semibold mb-2 text-text-secondary transition-colors duration-200;
  }

  .pagination-button {
    @apply p-2 rounded-full bg-card-background disabled:opacity-50 transition-all duration-200 hover:bg-opacity-80 focus:outline-none focus:ring-2 focus:ring-accent focus:ring-opacity-50;
  }

  .pagination-text {
    @apply text-sm text-text-secondary transition-colors duration-200;
  }

  .dropdown {
    @apply absolute top-full left-0 mt-2 w-full bg-card-background rounded-md shadow-lg z-10 py-1;
    animation: fadeInDown 0.3s ease-out;
  }

  .dropdown-item {
    @apply block w-full text-left px-4 py-2 text-sm text-text-primary transition-colors duration-200;
  }

  .dropdown-item:hover {
    @apply bg-gray-700;
  }

  .scrollbar-hide {
    -ms-overflow-style: none;  /* IE and Edge */
    scrollbar-width: none;  /* Firefox */
  }
  
  .scrollbar-hide::-webkit-scrollbar {
    display: none;  /* Chrome, Safari and Opera */
  }
}

@keyframes fadeInDown {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.fade-in {
  animation: fadeIn 0.3s ease-in-out;
}
